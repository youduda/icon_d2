#!/bin/bash
set -e

# Cd into our working directory in case we're not into it already
cd "$(dirname "$0")";

echo "-----------------------------------------------------------------------------------------"
echo "icon-d2: Starting processing of icon model data - `date`"
echo "-----------------------------------------------------------------------------------------"

# Folder to be used to download and process data
export MODEL_DATA_FOLDER="/app/icon-d2/"
export HOME_FOLDER=$(pwd)
export N_CONCUR_PROCESSES=8
export NCFTP_BOOKMARK="mid"
DATA_DOWNLOAD=true
DATA_PLOTTING=false
DATA_UPLOAD=false

##### LOAD functions to download model data
. ./functions_download_dwd.sh
export SHELL=$(type -p bash)
# We need to open many files at the same time
ulimit -Sn 4096
###########################################

# Retrieve run ##########################
latest_run=`python get_last_run.py`
if [ -f $MODEL_DATA_FOLDER/last_processed_run.txt ]; then
	latest_processed_run=`while read line; do echo $line; done < $MODEL_DATA_FOLDER/last_processed_run.txt`
	if [ $latest_run -gt $latest_processed_run ]; then
		echo "New run ${latest_run} found! Last processed run was ${latest_processed_run}."
	else
		echo "Run ${latest_processed_run} already processed, exiting"
		exit 0
	fi
fi

export year=${latest_run:0:4}
export month=${latest_run:4:2}
export day=${latest_run:6:2}
export run=${latest_run:8:2}

echo "Processing run ${latest_run}"

###########################################

mkdir -p ${MODEL_DATA_FOLDER}it
mkdir -p ${MODEL_DATA_FOLDER}nord
# Move to the data folder to do processing
cd ${MODEL_DATA_FOLDER} || { echo 'Cannot change to DATA folder' ; exit 1; }

# SECTION 1 - DATA DOWNLOAD ############################################################

if [ "$DATA_DOWNLOAD" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "icon-d2: Starting downloading of data - `date`"
	echo "-----------------------------------------------------------------------------------------"
	# Remove older files
	touch ${MODEL_DATA_FOLDER}dummy-file-to-ignore-empty-directory.nc
	rm ${MODEL_DATA_FOLDER}*.nc

	# # Invariant
	download_invariant_icon_d2

	# #2-D variables
	variables=('alb_rad' 'alhfl_s' 'apab_s' 'ashfl_s' 'asob_s' 'asob_t' 'aswdifd_s' 'aswdifu_s' 'aswdir_s' 'athb_s' 'athb_t' 'aumfl_s' 'avmfl_s' 'cape_con' 'cape_ml' 'ceiling' 'cin_ml' 'clch' 'clcl' 'clcm' 'clct' 'clct_mod' 'cldepth' 'dbz_850' 'dbz_cmax' 'dbz_ctmax' 'freshsnw' 'fr_ice' 'grau_gsp' 'hbas_con' 'hbas_sc' 'h_ice' 'h_snow' 'htop_con' 'htop_dc' 'htop_sc' 'hzerocl' 'lpi' 'lpi_max' 'lpi_con_max' 'pmsl' 'prg_gsp' 'prr_gsp' 'prs_gsp' 'ps' 'qv_2m' 'qv_s' 'rain_con' 'rain_gsp' 'relhum_2m' 'rho_snow' 'runoff_g' 'runoff_s' 'sdi2' 'snowc' 'snow_con' 'snow_gsp' 'snowlmt' 'sobs_rad' 'synmsg_bt_cl_ir10.8' 'synmsg_bt_cl_wv6.2' 't_2m' 'tch' 'tcm' 'tcond_max' 'tcond10_max' 'td_2m' 't_g' 'thbs_rad' 't_ice' 'tmax_2m' 'tmin_2m' 'tot_prec' 'tqc' 'tqc_dia' 'tqg' 'tqi' 'tqi_dia' 'tqr' 'tqs' 'tqv' 'tqv_dia' 'twater' 't_s' 't_snow' 'u_10m' 'uh_max' 'uh_max_low' 'uh_max_med' 'v_10m' 'vmax_10m' 'vorw_ctmax' 'w_ctmax' 'w_i' 'w_snow' 'ww' 'z0')
	parallel -j 4 --delay 1 download_merge_2d_variable_icon_d2 ::: "${variables[@]}"

	#3-D variables on pressure levels
	variables=("clc" "fi" "omega" "relhum" "t" "u" "v")
	parallel -j 4 --delay 2 download_merge_3d_variable_icon_d2 ::: "${variables[@]}"

fi

############################################################


# SECTION 2 - DATA PLOTTING ############################################################

if [ "$DATA_PLOTTING" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "icon-d2: Starting plotting of data - `date`"
	echo "-----------------------------------------------------------------------------------------"
	python --version
	cp ${HOME_FOLDER}/plotting/*.py ${MODEL_DATA_FOLDER}

	export QT_QPA_PLATFORM=offscreen # Needed to avoid errors when using Python without display

	# python plot_meteogram.py Hamburg Pisa Milano Utrecht

	scripts=("plot_cape.py" "plot_hsnow.py" "plot_pres_t2m_winds10m.py" "plot_rain_clouds.py" "plot_rain_acc.py"\
		     "plot_winds10m.py" "plot_gph_500_mslp.py" "plot_gph_t_500.py" "plot_gph_t_850.py" "plot_sat.py"\
		     "plot_winter.py" "plot_tmax.py" "plot_tmin.py")

	projections=("de" "it" "nord")

	parallel -j 3 --delay 1 python ::: "${scripts[@]}" ::: "${projections[@]}"
	touch ${MODEL_DATA_FOLDER}dummy-file-to-ignore-empty-directory.py
	rm ${MODEL_DATA_FOLDER}*.py
fi

############################################################

# If we at least produced some netcdf and images we assume the run is succesfull and
# store the run processed in a text file. Unfortunately there is no easy way to check
# if the processing is really succesfull as we have many errors in the process that
# don't undermine the whole processing!

N_NETCDF_FILES=`find . -type f -name '*.nc' -printf x | wc -c`
N_IMAGES=`find . -type f -name '*.png' -printf x | wc -c`

if [ $N_NETCDF_FILES -ge 2 ] && [ $N_IMAGES -ge 10 ]; then
	echo ${latest_run} > last_processed_run.txt
fi


# SECTION 3 - IMAGES UPLOAD ############################################################
# Use ncftpbookmarks to add a new FTP server with credentials
if [ "$DATA_UPLOAD" = true ]; then
	echo "-----------------------------------------------------------------------------------------"
	echo "icon-d2: Starting FTP uploading - `date`"
	echo "-----------------------------------------------------------------------------------------"
	# First upload meteograms
	ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} icon_d2/meteograms meteogram_*
	#
	# Then upload the other pictures
	#
	images_output=("cape_cin" "t_v_pres" "winds10m" "precip_clouds"\
		"hsnow" "tmin" "gph_500_mslp" "gph_t_500" "gph_t_850" "sat"\
		"winter" "precip_acc" "tmax")

	# suffix for naming
	projections_output=("" "it/" "nord/")
	# remote folder on server
	projections_output_folder=("icon_d2" "icon_d2/it" "icon_d2/nord")

	# Create a lisf of all the images to upload
	upload_elements=()
	for i in "${!projections_output[@]}"; do
		for j in "${images_output[@]}"; do
				upload_elements+=("${projections_output_folder[$i]}/${j} ./${projections_output[$i]}${j}_*.png")
		done
	done


	#for k in "${upload_elements[@]}"; do
	#	ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} ${k}
	#done
	num_procs=5
	num_iters=${#upload_elements[@]}
	num_jobs="\j"  # The prompt escape for number of jobs currently running
	for ((i=0; i<num_iters; i++)); do
		while (( ${num_jobs@P} >= num_procs )); do
		wait -n
		done
	ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} ${upload_elements[$i]} &
	done

fi

# SECTION 4 - CLEANING ############################################################

echo "-----------------------------------------------------------------------------------------"
echo "icon-d2: Finished processing run ${year}${month}${day}${run} - `date`"
echo "-----------------------------------------------------------------------------------------"

############################################################

cd -
